// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmartTrader.Infrastructure.Persistence;

#nullable disable

namespace SmartTrader.Infrastructure.src.SmartTrader.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250929185849_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("core")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SmartTrader.Infrastructure.Persistence.Entities.Candle1m", b =>
                {
                    b.Property<Guid>("SymbolId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("TsOpen")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ts_open");

                    b.Property<decimal>("Close")
                        .HasColumnType("numeric(38, 10)");

                    b.Property<decimal>("High")
                        .HasColumnType("numeric(38, 10)");

                    b.Property<decimal>("Low")
                        .HasColumnType("numeric(38, 10)");

                    b.Property<decimal>("Open")
                        .HasColumnType("numeric(38, 10)");

                    b.Property<decimal>("Volume")
                        .HasColumnType("numeric(38, 10)");

                    b.HasKey("SymbolId", "TsOpen");

                    b.HasIndex("SymbolId", "TsOpen")
                        .HasDatabaseName("ix_candles_1m_symbol_tsopen_desc");

                    b.ToTable("candles_1m", "market");
                });

            modelBuilder.Entity("SmartTrader.Infrastructure.Persistence.Entities.IndicatorsCache", b =>
                {
                    b.Property<Guid>("SymbolId")
                        .HasColumnType("uuid");

                    b.Property<string>("Timeframe")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CandleTs")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("candle_ts");

                    b.Property<string>("Values")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("SymbolId", "Timeframe", "Name", "CandleTs");

                    b.ToTable("indicators_cache", "market");
                });

            modelBuilder.Entity("SmartTrader.Infrastructure.Persistence.Entities.Outbox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTimeOffset?>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Status", "CreatedAt");

                    b.ToTable("outbox", "core");
                });

            modelBuilder.Entity("SmartTrader.Infrastructure.Persistence.Entities.Signal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CandleTs")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("candle_ts");

                    b.Property<decimal>("Confidence")
                        .HasColumnType("numeric(10, 4)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(38, 10)");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Snapshot")
                        .HasColumnType("jsonb");

                    b.Property<string>("Strategy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SymbolId")
                        .HasColumnType("uuid");

                    b.Property<string>("Timeframe")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SymbolId", "Timeframe", "Strategy", "CandleTs")
                        .IsUnique();

                    b.ToTable("signals", "core");
                });

            modelBuilder.Entity("SmartTrader.Infrastructure.Persistence.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Params")
                        .HasColumnType("jsonb")
                        .HasColumnName("params");

                    b.Property<string>("Strategy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SymbolId")
                        .HasColumnType("uuid");

                    b.Property<string>("Timeframe")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "SymbolId", "Timeframe", "Strategy")
                        .IsUnique();

                    b.ToTable("subscriptions", "core");
                });

            modelBuilder.Entity("SmartTrader.Infrastructure.Persistence.Entities.Symbol", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BaseAsset")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QuoteAsset")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("symbols", "market");
                });

            modelBuilder.Entity("SmartTrader.Infrastructure.Persistence.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId")
                        .IsUnique();

                    b.ToTable("users", "core");
                });

            modelBuilder.Entity("SmartTrader.Infrastructure.Persistence.Entities.Subscription", b =>
                {
                    b.HasOne("SmartTrader.Infrastructure.Persistence.Entities.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartTrader.Infrastructure.Persistence.Entities.User", b =>
                {
                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
